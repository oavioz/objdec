"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RegionComponent {
    constructor(paper, paperRect, regionData, callbacks = null) {
        this.isVisible = true;
        this.isFrozen = false;
        this.isSelected = false;
        this.paper = paper;
        this.paperRect = paperRect;
        this.regionData = regionData;
        this.callbacks = {
            onChange: null,
            onManipulationBegin: null,
            onManipulationEnd: null
        };
        if (callbacks !== null && callbacks !== undefined) {
            if (callbacks.onManipulationBegin !== undefined) {
                this.callbacks.onManipulationBegin = callbacks.onManipulationBegin;
            }
            if (callbacks.onManipulationEnd !== undefined) {
                this.callbacks.onManipulationEnd = callbacks.onManipulationEnd;
            }
            if (callbacks.onChange !== undefined) {
                this.callbacks.onChange = callbacks.onChange;
            }
        }
    }
    get x() {
        return this.regionData.x;
    }
    get y() {
        return this.regionData.y;
    }
    get width() {
        return this.regionData.boundRect.width;
    }
    get height() {
        return this.regionData.boundRect.height;
    }
    get area() {
        return this.regionData.area;
    }
    get boundRect() {
        return this.regionData.boundRect;
    }
    onChange(region, regionData, eventType, multiSelection) {
        if (this.callbacks.onChange !== null && this.callbacks.onChange !== undefined) {
            this.callbacks.onChange(region, regionData, eventType, multiSelection);
        }
    }
    ;
    onManipulationBegin(region) {
        if (this.callbacks.onManipulationBegin !== null && this.callbacks.onManipulationBegin !== undefined) {
            this.callbacks.onManipulationBegin(region);
        }
    }
    ;
    onManipulationEnd(region) {
        if (this.callbacks.onManipulationEnd !== null && this.callbacks.onManipulationEnd !== undefined) {
            this.callbacks.onManipulationEnd(region);
        }
    }
    ;
    hide() {
        this.node.node.setAttribute("visibility", "hidden");
        this.isVisible = false;
    }
    show() {
        this.node.node.setAttribute("visibility", "visible");
        this.isVisible = true;
    }
    select() {
        this.isSelected = true;
        this.node.addClass("selected");
    }
    unselect() {
        this.isSelected = false;
        this.node.removeClass("selected");
    }
    freeze() {
        this.isFrozen = true;
    }
    unfreeze() {
        this.isFrozen = false;
    }
    move(arg1, arg2) {
        this.regionData.move(arg1, arg2);
        this.redraw();
    }
    redraw() {
    }
    resize(width, height) {
        this.regionData.resize(width, height);
        this.redraw();
    }
    resizePaper(width, height) {
        this.paperRect.resize(width, height);
    }
    subscribeToEvents(listeners) {
        listeners.forEach((e) => {
            e.base.addEventListener(e.event, this.makeFreezable(e.listener.bind(this), e.bypass));
        });
    }
    makeFreezable(f, bypass = false) {
        return (args) => {
            if (!this.isFrozen || bypass) {
                f(args);
            }
        };
    }
}
exports.RegionComponent = RegionComponent;
//# sourceMappingURL=RegionComponent.js.map
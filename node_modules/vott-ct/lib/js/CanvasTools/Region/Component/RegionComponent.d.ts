/// <reference types="snapsvg" />
import { Rect } from "../../Core/Rect";
import { IEventDescriptor } from "../../Interface/IEventDescriptor";
import { IFreezable } from "../../Interface/IFreezable";
import { IHideable } from "../../Interface/IHideadble";
import { IMovable } from "../../Interface/IMovable";
import { IResizable } from "../../Interface/IResizable";
import { IRegionCallbacks, ChangeEventType } from "../../Interface/IRegionCallbacks";
import { RegionData } from "../../Core/RegionData";
export declare abstract class RegionComponent implements IHideable, IResizable, IMovable, IFreezable {
    node: Snap.Element;
    regionData: RegionData;
    private callbacks;
    isVisible: boolean;
    isFrozen: boolean;
    isSelected: boolean;
    protected paper: Snap.Paper;
    protected paperRect: Rect;
    readonly x: number;
    readonly y: number;
    readonly width: number;
    readonly height: number;
    readonly area: number;
    readonly boundRect: Rect;
    constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks?: IRegionCallbacks);
    onChange(region: RegionComponent, regionData: RegionData, eventType?: ChangeEventType, multiSelection?: boolean): void;
    onManipulationBegin(region?: RegionComponent): void;
    onManipulationEnd(region?: RegionComponent): void;
    hide(): void;
    show(): void;
    select(): void;
    unselect(): void;
    freeze(): void;
    unfreeze(): void;
    move(point: IMovable): void;
    move(x: number, y: number): void;
    redraw(): void;
    resize(width: number, height: number): void;
    resizePaper(width: number, height: number): void;
    protected subscribeToEvents(listeners: IEventDescriptor[]): void;
    protected makeFreezable(f: (args: PointerEvent | KeyboardEvent) => void, bypass?: boolean): (args: KeyboardEvent | PointerEvent) => void;
}

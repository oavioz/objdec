"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Point2D_1 = require("../../Core/Point2D");
const IRegionCallbacks_1 = require("../../Interface/IRegionCallbacks");
const RegionComponent_1 = require("./RegionComponent");
class DragComponent extends RegionComponent_1.RegionComponent {
    constructor(paper, paperRect = null, regionData, callbacks) {
        super(paper, paperRect, regionData, callbacks);
        this.isDragged = false;
        this.node = paper.g();
        this.node.addClass("dragLayer");
    }
    onDragBegin() {
        this.dragOrigin = new Point2D_1.Point2D(this.x, this.y);
    }
    onDragMove(dx, dy) {
        if (dx != 0 && dy != 0) {
            let p = new Point2D_1.Point2D(this.dragOrigin.x + dx, this.dragOrigin.y + dy);
            if (this.paperRect !== null) {
                p = p.boundToRect(this.paperRect);
            }
            let rd = this.regionData.copy();
            rd.move(p);
            this.onChange(this, rd, IRegionCallbacks_1.ChangeEventType.MOVING);
        }
    }
    ;
    onDragEnd() {
        this.dragOrigin = null;
        this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEEND);
    }
    subscribeToDragEvents() {
        this.dragNode.node.addEventListener("pointerenter", (e) => {
            if (!this.isFrozen) {
                this.dragNode.undrag();
                this.dragNode.drag(this.onDragMove.bind(this), this.onDragBegin.bind(this), this.onDragEnd.bind(this));
                this.isDragged = true;
                this.onManipulationBegin();
            }
        });
        this.dragNode.node.addEventListener("pointermove", (e) => {
            if (!this.isDragged && !this.isFrozen) {
                this.dragNode.undrag();
                this.dragNode.drag(this.onDragMove.bind(this), this.onDragBegin.bind(this), this.onDragEnd.bind(this));
                this.isDragged = true;
                this.onManipulationBegin();
            }
        });
        this.dragNode.node.addEventListener("pointerleave", (e) => {
            this.dragNode.undrag();
            this.isDragged = false;
            this.onManipulationEnd();
        });
        this.dragNode.node.addEventListener("pointerdown", (e) => {
            if (!this.isFrozen) {
                this.dragNode.node.setPointerCapture(e.pointerId);
                let multiselection = e.shiftKey;
                this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.MOVEBEGIN, multiselection);
            }
        });
        this.dragNode.node.addEventListener("pointerup", (e) => {
            if (!this.isFrozen) {
                this.dragNode.node.releasePointerCapture(e.pointerId);
                let multiselection = e.shiftKey;
                this.onChange(this, this.regionData.copy(), IRegionCallbacks_1.ChangeEventType.SELECTIONTOGGLE, multiselection);
            }
        });
    }
    freeze() {
        super.freeze();
        this.dragNode.undrag();
        this.onManipulationEnd();
    }
}
exports.DragComponent = DragComponent;
//# sourceMappingURL=DragComponent.js.map
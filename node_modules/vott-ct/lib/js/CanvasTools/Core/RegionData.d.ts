import { IMovable } from "../Interface/IMovable";
import { IRegionData } from "../Interface/IRegionData";
import { IResizable } from "../Interface/IResizable";
import { IRect } from "../Interface/IRect";
import { Point2D } from "./Point2D";
import { Rect } from "./Rect";
import { IPoint2D } from "../Interface/IPoint2D";
export declare enum RegionDataType {
    Point = "point",
    Rect = "rect",
    Polyline = "polyline",
    Polygon = "polygon"
}
export declare class RegionData implements IMovable, IResizable {
    static BuildPointRegionData(x: number, y: number): RegionData;
    static BuildRectRegionData(x: number, y: number, width: number, height: number): RegionData;
    static BuildFromJson(data: IRegionData): RegionData;
    x: number;
    y: number;
    width: number;
    height: number;
    readonly area: number;
    boundRect: Rect;
    points: Point2D[];
    readonly type: RegionDataType;
    protected corner: Point2D;
    protected regionRect: Rect;
    protected regionPoints: Point2D[];
    protected regionType: RegionDataType;
    constructor(x: number, y: number, width: number, height: number, points?: Point2D[], type?: RegionDataType);
    move(point: IPoint2D): void;
    move(x: number, y: number): void;
    resize(width: number, height: number): void;
    setPoint(point: IPoint2D, index: number): void;
    setPoints(points: IPoint2D[]): void;
    initFrom(regionData: IRegionData): void;
    boundToRect(rect: IRect): RegionData;
    scale(xfactor: number, yfactor: number): void;
    scale(factor: number): void;
    copy(): RegionData;
    toString(): string;
    toJSON(): IRegionData;
}

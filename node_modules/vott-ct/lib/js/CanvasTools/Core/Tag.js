"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Tag {
    constructor(name, colorHue, id = "") {
        this.tagColorPure = "";
        this.tagColorAccent = "";
        this.tagColorHighlight = "";
        this.tagColorShadow = "";
        this.tagColorNoColor = "";
        this.tagColorDark = "";
        this.tagName = name;
        this.tagHue = colorHue;
        this.tagID = id;
    }
    static BuildFromJSON(data) {
        return new Tag(data.name, data.colorHue, (data.id === undefined) ? "" : data.id);
    }
    static getHueFromColor(color) {
        const r = parseInt(color.substring(1, 3), 16) / 255;
        const g = parseInt(color.substring(3, 5), 16) / 255;
        const b = parseInt(color.substring(5, 7), 16) / 255;
        const max = Math.max(r, g, b);
        const min = Math.min(r, g, b);
        let h = 0;
        let s = 0;
        const l = (max + min) / 2;
        if (max === min) {
            h = s = 0;
        }
        else {
            const d = max - min;
            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
            switch (max) {
                case r:
                    h = (g - b) / d + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / d + 2;
                    break;
                case b:
                    h = (r - g) / d + 4;
                    break;
            }
            h /= 6;
        }
        return h;
    }
    get colorHue() {
        return this.tagHue;
    }
    ;
    get name() {
        return this.tagName;
    }
    get id() {
        return this.tagID;
    }
    get colorPure() {
        if (this.tagColorPure === "") {
            this.tagColorPure = `hsl(${this.tagHue.toString()}, 100%, 50%)`;
        }
        return this.tagColorPure;
    }
    get colorAccent() {
        if (this.tagColorAccent === "") {
            this.tagColorAccent = `hsla(${this.tagHue.toString()}, 100%, 50%, 0.5)`;
        }
        return this.tagColorAccent;
    }
    get colorHighlight() {
        if (this.tagColorHighlight === "") {
            this.tagColorHighlight = `hsla(${this.tagHue.toString()}, 80%, 40%, 0.3)`;
        }
        return this.tagColorHighlight;
    }
    get colorShadow() {
        if (this.tagColorShadow === "") {
            this.tagColorShadow = `hsla(${this.tagHue.toString()}, 50%, 30%, 0.2)`;
        }
        return this.tagColorShadow;
    }
    get colorDark() {
        if (this.tagColorDark === "") {
            this.tagColorDark = `hsla(${this.tagHue.toString()}, 50%, 30%, 0.8)`;
        }
        return this.tagColorDark;
    }
    get colorNoColor() {
        if (this.tagColorNoColor === "") {
            this.tagColorNoColor = `rgba(0, 0, 0, 0.0)`;
        }
        return this.tagColorNoColor;
    }
    copy() {
        return new Tag(this.tagName, this.tagHue, this.tagID);
    }
    toJSON() {
        return {
            name: this.tagName,
            colorHue: this.tagHue,
            id: this.tagID
        };
    }
}
exports.Tag = Tag;
//# sourceMappingURL=Tag.js.map
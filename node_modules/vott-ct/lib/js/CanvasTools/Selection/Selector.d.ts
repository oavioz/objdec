/// <reference types="snapsvg" />
import { Rect } from "../Core/Rect";
import { IEventDescriptor } from "../Interface/IEventDescriptor";
import { IHideable } from "../Interface/IHideadble";
import { IResizable } from "../Interface/IResizable";
import { ISelectorCallbacks } from "../Interface/ISelectorCallbacks";
import { ElementPart } from "./ElementPart";
export declare abstract class Selector extends ElementPart {
    callbacks: ISelectorCallbacks;
    protected isEnabled: boolean;
    constructor(paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
    enable(): void;
    disable(): void;
    protected subscribeToEvents(listeners: IEventDescriptor[]): void;
    protected enablify(f: (args: PointerEvent | KeyboardEvent) => void, bypass?: boolean): (args: KeyboardEvent | PointerEvent) => void;
    protected showAll(elements: IHideable[]): void;
    protected hideAll(elements: IHideable[]): void;
    protected resizeAll(elementSet: IResizable[]): void;
}

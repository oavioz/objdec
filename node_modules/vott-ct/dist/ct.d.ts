// Generated by dts-bundle v0.7.3

export * from 'CanvasTools/CanvasTools/CanvasTools.Editor';
export * from 'CanvasTools/CanvasTools/CanvasTools.Filter';
export * from 'CanvasTools/CanvasTools/Core/Point2D';
export * from 'CanvasTools/CanvasTools/Core/Rect';
export * from 'CanvasTools/CanvasTools/Core/RegionData';
export * from 'CanvasTools/CanvasTools/Core/Tag';
export * from 'CanvasTools/CanvasTools/Core/TagsDescriptor';
export * from 'CanvasTools/CanvasTools/Interface/IBoundable';
export * from 'CanvasTools/CanvasTools/Interface/IEventDescriptor';
export * from 'CanvasTools/CanvasTools/Interface/IFreezable';
export * from 'CanvasTools/CanvasTools/Interface/IHideadble';
export * from 'CanvasTools/CanvasTools/Interface/IMovable';
export * from 'CanvasTools/CanvasTools/Interface/IPoint2D';
export * from 'CanvasTools/CanvasTools/Interface/IRect';
export * from 'CanvasTools/CanvasTools/Interface/IRegionCallbacks';
export * from 'CanvasTools/CanvasTools/Interface/IRegionData';
export * from 'CanvasTools/CanvasTools/Interface/IResizable';
export * from 'CanvasTools/CanvasTools/Interface/ISelectorCallbacks';
export * from 'CanvasTools/CanvasTools/Interface/ITag';
export * from 'CanvasTools/CanvasTools/Interface/ITagsDescriptor';
export * from 'CanvasTools/CanvasTools/Interface/ITagsUpdateOptions';
export * from 'CanvasTools/CanvasTools/Interface/IToolbarIcon';
export * from 'CanvasTools/CanvasTools/Region/Component/AnchorsComponent';
export * from 'CanvasTools/CanvasTools/Region/Component/DragComponent';
export * from 'CanvasTools/CanvasTools/Region/Component/RegionComponent';
export * from 'CanvasTools/CanvasTools/Region/Component/TagsComponent';
export * from 'CanvasTools/CanvasTools/Region/Point/DragElement';
export * from 'CanvasTools/CanvasTools/Region/Point/PointRegion';
export * from 'CanvasTools/CanvasTools/Region/Point/TagsElement';
export * from 'CanvasTools/CanvasTools/Region/Polygon/AnchorsElement';
export * from 'CanvasTools/CanvasTools/Region/Polygon/DragElement';
export * from 'CanvasTools/CanvasTools/Region/Polygon/PolygonRegion';
export * from 'CanvasTools/CanvasTools/Region/Polygon/TagsElement';
export * from 'CanvasTools/CanvasTools/Region/Polyline/AnchorsElement';
export * from 'CanvasTools/CanvasTools/Region/Polyline/DragElement';
export * from 'CanvasTools/CanvasTools/Region/Polyline/PolylineRegion';
export * from 'CanvasTools/CanvasTools/Region/Polyline/TagsElement';
export * from 'CanvasTools/CanvasTools/Region/Rect/AnchorsElements';
export * from 'CanvasTools/CanvasTools/Region/Rect/DragElement';
export * from 'CanvasTools/CanvasTools/Region/Rect/RectRegion';
export * from 'CanvasTools/CanvasTools/Region/Rect/TagsElement';
export * from 'CanvasTools/CanvasTools/Region/Region';
export * from 'CanvasTools/CanvasTools/Region/RegionMenu';
export * from 'CanvasTools/CanvasTools/Region/RegionsManager';
export * from 'CanvasTools/CanvasTools/Selection/AreaSelector';
export * from 'CanvasTools/CanvasTools/Selection/CrossElement';
export * from 'CanvasTools/CanvasTools/Selection/ElementPart';
export * from 'CanvasTools/CanvasTools/Selection/MaskElement';
export * from 'CanvasTools/CanvasTools/Selection/PointSelector';
export * from 'CanvasTools/CanvasTools/Selection/PolygonSelector';
export * from 'CanvasTools/CanvasTools/Selection/PolylineSelector';
export * from 'CanvasTools/CanvasTools/Selection/RectCopySelector';
export * from 'CanvasTools/CanvasTools/Selection/RectElement';
export * from 'CanvasTools/CanvasTools/Selection/RectSelector';
export * from 'CanvasTools/CanvasTools/Selection/Selector';
export * from 'CanvasTools/CanvasTools/Toolbar/Toolbar';
export * from 'CanvasTools/CanvasTools/Toolbar/ToolbarIcon';
export * from 'CanvasTools/CanvasTools/Toolbar/ToolbarSelectIcon';
export * from 'CanvasTools/CanvasTools/Toolbar/ToolbarSeparator';
export * from 'CanvasTools/CanvasTools/Toolbar/ToolbarSwitchIcon';

declare module 'CanvasTools/CanvasTools/CanvasTools.Editor' {
    import { FilterPipeline } from "CanvasTools/CanvasTools/CanvasTools.Filter";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    import { RegionsManager } from "CanvasTools/CanvasTools/Region/RegionsManager";
    import { AreaSelector } from "CanvasTools/CanvasTools/Selection/AreaSelector";
    import { ToolbarItemType } from "CanvasTools/CanvasTools/Toolbar/ToolbarIcon";
    type ToolbarIconDescription = {
        type: ToolbarItemType.SELECTOR | ToolbarItemType.SWITCH;
        action: string;
        iconFile: string;
        tooltip: string;
        keycode: string;
        actionCallback: (action: string, rm: RegionsManager, sl: AreaSelector) => void;
        width?: number;
        height?: number;
        activate: boolean;
    } | {
        type: ToolbarItemType.SEPARATOR;
    };
    export class Editor {
        autoResize: boolean;
        constructor(editorZone: HTMLDivElement);
        onRegionManipulationBegin(region?: RegionComponent): void;
        onRegionManipulationEnd(region?: RegionComponent): void;
        onRegionSelected(id: string, multiselection: boolean): void;
        onRegionMove(id: string, regionData: RegionData): void;
        onRegionDelete(id: string): void;
        onSelectionBegin(): void;
        onSelectionEnd(commit: any): void;
        static FullToolbarSet: Array<ToolbarIconDescription>;
        static RectToolbarSet: Array<ToolbarIconDescription>;
        addToolbar(toolbarZone: HTMLDivElement, toolbarSet: Array<ToolbarIconDescription>, iconsPath: string): void;
        addContentSource(source: HTMLCanvasElement | HTMLImageElement | HTMLVideoElement): Promise<void>;
        resize(containerWidth: number, containerHeight: number): void;
        readonly RM: RegionsManager;
        readonly FilterPipeline: FilterPipeline;
        scaleRegionToSourceSize(regionData: RegionData, sourceWidth?: number, sourceHeight?: number): RegionData;
        scaleRegionToFrameSize(regionData: RegionData, sourceWidth?: number, sourceHeight?: number): RegionData;
    }
    export {};
}

declare module 'CanvasTools/CanvasTools/CanvasTools.Filter' {
    export type FilterFunction = (canvas: HTMLCanvasElement) => Promise<HTMLCanvasElement>;
    export function InvertFilter(canvas: HTMLCanvasElement): Promise<HTMLCanvasElement>;
    export function GrayscaleFilter(canvas: HTMLCanvasElement): Promise<HTMLCanvasElement>;
    export class FilterPipeline {
        constructor();
        addFilter(filter: FilterFunction): void;
        clearPipeline(): void;
        applyToCanvas(canvas: HTMLCanvasElement): Promise<HTMLCanvasElement>;
    }
}

declare module 'CanvasTools/CanvasTools/Core/Point2D' {
    import { IBoundable } from "CanvasTools/CanvasTools/Interface/IBoundable";
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { IPoint2D } from "CanvasTools/CanvasTools/Interface/IPoint2D";
    import { IRect } from "CanvasTools/CanvasTools/Interface/IRect";
    export class Point2D implements IMovable, IBoundable<Point2D> {
        static BuildFromJSON(data: IPoint2D): Point2D;
        x: number;
        y: number;
        constructor(x: number, y: number);
        constructor(p: IPoint2D);
        move(x: number, y: number): void;
        move(point: IPoint2D): void;
        shift(dx: number, dy: number): void;
        boundToRect(r: IRect): Point2D;
        squareDistanceToPoint(p: Point2D): number;
        squareDistanceToLine(p1: Point2D, p2: Point2D): number;
        copy(): Point2D;
        toString(): string;
        toJSON(): IPoint2D;
    }
}

declare module 'CanvasTools/CanvasTools/Core/Rect' {
    import { IRect } from "CanvasTools/CanvasTools/Interface/IRect";
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    export class Rect implements IResizable {
        static BuildFromJSON(data: IRect): Rect;
        width: number;
        height: number;
        constructor(width: number, height: number);
        resize(width: number, height: number): void;
        copy(): Rect;
        toString(): string;
        toJSON(): IRect;
    }
}

declare module 'CanvasTools/CanvasTools/Core/RegionData' {
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { IRegionData } from "CanvasTools/CanvasTools/Interface/IRegionData";
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    import { IRect } from "CanvasTools/CanvasTools/Interface/IRect";
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { IPoint2D } from "CanvasTools/CanvasTools/Interface/IPoint2D";
    export enum RegionDataType {
        Point = "point",
        Rect = "rect",
        Polyline = "polyline",
        Polygon = "polygon"
    }
    export class RegionData implements IMovable, IResizable {
        static BuildPointRegionData(x: number, y: number): RegionData;
        static BuildRectRegionData(x: number, y: number, width: number, height: number): RegionData;
        static BuildFromJson(data: IRegionData): RegionData;
        x: number;
        y: number;
        width: number;
        height: number;
        readonly area: number;
        boundRect: Rect;
        points: Point2D[];
        readonly type: RegionDataType;
        protected corner: Point2D;
        protected regionRect: Rect;
        protected regionPoints: Point2D[];
        protected regionType: RegionDataType;
        constructor(x: number, y: number, width: number, height: number, points?: Point2D[], type?: RegionDataType);
        move(point: IPoint2D): void;
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
        setPoint(point: IPoint2D, index: number): void;
        setPoints(points: IPoint2D[]): void;
        initFrom(regionData: IRegionData): void;
        boundToRect(rect: IRect): RegionData;
        scale(xfactor: number, yfactor: number): void;
        scale(factor: number): void;
        copy(): RegionData;
        toString(): string;
        toJSON(): IRegionData;
    }
}

declare module 'CanvasTools/CanvasTools/Core/Tag' {
    import { ITag } from "CanvasTools/CanvasTools/Interface/ITag";
    export class Tag implements ITag {
        static BuildFromJSON(data: ITag): Tag;
        static getHueFromColor(color: string): number;
        readonly colorHue: number;
        readonly name: string;
        readonly id: string;
        readonly colorPure: string;
        readonly colorAccent: string;
        readonly colorHighlight: string;
        readonly colorShadow: string;
        readonly colorDark: string;
        readonly colorNoColor: string;
        constructor(name: string, colorHue: number, id?: string);
        copy(): Tag;
        toJSON(): ITag;
    }
}

declare module 'CanvasTools/CanvasTools/Core/TagsDescriptor' {
    import { Tag } from "CanvasTools/CanvasTools/Core/Tag";
    import { ITagsDescriptor } from "CanvasTools/CanvasTools/Interface/ITagsDescriptor";
    export class TagsDescriptor {
        static BuildFromJSON(data: ITagsDescriptor): TagsDescriptor;
        readonly all: Tag[];
        readonly primary: Tag;
        readonly secondary: Tag[];
        constructor(primaryTag: Tag, secondaryTags?: Tag[]);
        toString(): string;
        toJSON(): ITagsDescriptor;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IBoundable' {
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    export interface IBoundable<T> {
        boundToRect(rect: IResizable): T;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IEventDescriptor' {
    export interface IEventDescriptor {
        event: string;
        listener: (e: PointerEvent | MouseEvent | KeyboardEvent | WheelEvent) => void;
        base: SVGSVGElement | HTMLElement | Window;
        bypass: boolean;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IFreezable' {
    export interface IFreezable {
        freeze(): void;
        unfreeze(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IHideadble' {
    export interface IHideable {
        hide(): void;
        show(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IMovable' {
    import { IPoint2D } from "CanvasTools/CanvasTools/Interface/IPoint2D";
    export interface IMovable extends IPoint2D {
        move(point: IPoint2D): void;
        move(x: number, y: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IPoint2D' {
    export interface IPoint2D {
        x: number;
        y: number;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IRect' {
    export interface IRect {
        width: number;
        height: number;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IRegionCallbacks' {
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export type ManipulationFunction = (UIElement?: RegionComponent) => void;
    export enum ChangeEventType {
        MOVEEND = 0,
        MOVING = 1,
        MOVEBEGIN = 2,
        SELECTIONTOGGLE = 3
    }
    export type ChangeFunction = (region: RegionComponent, regionData: RegionData, eventType?: ChangeEventType, multiSelection?: boolean) => void;
    export interface IRegionCallbacks {
        onManipulationBegin: ManipulationFunction;
        onManipulationEnd: ManipulationFunction;
        onChange: ChangeFunction;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IRegionData' {
    import { RegionDataType } from "CanvasTools/CanvasTools/Core/RegionData";
    export interface IRegionData {
        x: number;
        y: number;
        width: number;
        height: number;
        points: {
            x: number;
            y: number;
        }[];
        type: RegionDataType;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IResizable' {
    import { IRect } from "CanvasTools/CanvasTools/Interface/IRect";
    export interface IResizable extends IRect {
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/ISelectorCallbacks' {
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    export interface ISelectorCallbacks {
        onSelectionBegin: () => void;
        onSelectionEnd: (regionData: RegionData) => void;
        onLocked?: () => void;
        onUnlocked?: () => void;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/ITag' {
    export interface ITag {
        colorHue: number;
        name: string;
        id?: string;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/ITagsDescriptor' {
    import { ITag } from "CanvasTools/CanvasTools/Interface/ITag";
    export interface ITagsDescriptor {
        primary: ITag;
        secondary?: ITag[];
    }
}

declare module 'CanvasTools/CanvasTools/Interface/ITagsUpdateOptions' {
    export interface ITagsUpdateOptions {
        showRegionBackground: boolean;
    }
}

declare module 'CanvasTools/CanvasTools/Interface/IToolbarIcon' {
    export interface IToolbarIcon {
        action: string;
        iconUrl: string;
        tooltip: string;
        keycode: string;
        width: number;
        height: number;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Component/AnchorsComponent' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export class AnchorsComponent extends RegionComponent {
        static DEFAULT_ANCHOR_RADIUS: number;
        static DEFAULT_GHOST_ANCHOR_RADIUS: number;
        protected anchors: Snap.Element[];
        protected anchorsNode: Snap.Element;
        protected ghostAnchor: Snap.Element;
        protected activeAnchorIndex: number;
        protected dragOrigin: Point2D;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        protected buildPointAnchors(): void;
        redraw(): void;
        freeze(): void;
        protected subscribeAnchorToEvents(anchor: Snap.Element, index: number): void;
        protected createAnchor(paper: Snap.Paper, x: number, y: number, style?: string, r?: number): Snap.Element;
        protected updateRegion(p: Point2D): void;
        protected anchorDragBegin(): void;
        protected anchorDragMove(dx: number, dy: number, x: number, y: number): void;
        protected anchorDragEnd(): void;
        protected onGhostPointerEnter(e: PointerEvent): void;
        protected onGhostPointerLeave(e: PointerEvent): void;
        protected onGhostPointerDown(e: PointerEvent): void;
        protected onGhostPointerMove(e: PointerEvent): void;
        protected onGhostPointerUp(e: PointerEvent): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Component/DragComponent' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export abstract class DragComponent extends RegionComponent {
        protected dragNode: Snap.Element;
        protected isDragged: boolean;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        protected dragOrigin: Point2D;
        protected onDragBegin(): void;
        protected onDragMove(dx: number, dy: number): void;
        protected onDragEnd(): void;
        protected subscribeToDragEvents(): void;
        freeze(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Component/RegionComponent' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { IEventDescriptor } from "CanvasTools/CanvasTools/Interface/IEventDescriptor";
    import { IFreezable } from "CanvasTools/CanvasTools/Interface/IFreezable";
    import { IHideable } from "CanvasTools/CanvasTools/Interface/IHideadble";
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    import { IRegionCallbacks, ChangeEventType } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    export abstract class RegionComponent implements IHideable, IResizable, IMovable, IFreezable {
        node: Snap.Element;
        regionData: RegionData;
        isVisible: boolean;
        isFrozen: boolean;
        isSelected: boolean;
        protected paper: Snap.Paper;
        protected paperRect: Rect;
        readonly x: number;
        readonly y: number;
        readonly width: number;
        readonly height: number;
        readonly area: number;
        readonly boundRect: Rect;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks?: IRegionCallbacks);
        onChange(region: RegionComponent, regionData: RegionData, eventType?: ChangeEventType, multiSelection?: boolean): void;
        onManipulationBegin(region?: RegionComponent): void;
        onManipulationEnd(region?: RegionComponent): void;
        hide(): void;
        show(): void;
        select(): void;
        unselect(): void;
        freeze(): void;
        unfreeze(): void;
        move(point: IMovable): void;
        move(x: number, y: number): void;
        redraw(): void;
        resize(width: number, height: number): void;
        resizePaper(width: number, height: number): void;
        protected subscribeToEvents(listeners: IEventDescriptor[]): void;
        protected makeFreezable(f: (args: PointerEvent | KeyboardEvent) => void, bypass?: boolean): (args: KeyboardEvent | PointerEvent) => void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Component/TagsComponent' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export abstract class TagsComponent extends RegionComponent {
        protected primaryTagNode: Snap.Element;
        protected secondaryTagsNode: Snap.Element;
        protected secondaryTags: Array<Snap.Element>;
        tags: TagsDescriptor;
        protected styleId: string;
        protected styleSheet: CSSStyleSheet;
        protected tagsUpdateOptions: ITagsUpdateOptions;
        protected styleMap: {
            rule: string;
            style: string;
        }[];
        protected styleLightMap: {
            rule: string;
            style: string;
        }[];
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, tags: TagsDescriptor, styleId: string, styleSheet: CSSStyleSheet, tagsUpdateOptions?: ITagsUpdateOptions);
        protected initStyleMaps(tags: TagsDescriptor): void;
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
        protected rebuildTagLabels(): void;
        protected clearStyleMaps(): void;
        protected applyStyleMaps(showRegionBackground?: boolean): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Point/DragElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { DragComponent } from "CanvasTools/CanvasTools/Region/Component/DragComponent";
    export class DragElement extends DragComponent {
        static DEFAULT_DRAG_RADIUS: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Point/PointRegion' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { Region } from "CanvasTools/CanvasTools/Region/Region";
    export class PointRegion extends Region {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, id: string, tagsDescriptor: TagsDescriptor, callbacks: IRegionCallbacks, tagsUpdateOptions?: ITagsUpdateOptions);
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Point/TagsElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { TagsComponent } from "CanvasTools/CanvasTools/Region/Component/TagsComponent";
    export class TagsElement extends TagsComponent {
        static DEFAULT_PRIMARY_TAG_RADIUS: number;
        static DEFAULT_SECONDARY_TAG_SIZE: number;
        static DEFAULT_SECONDARY_TAG_DY: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, tags: TagsDescriptor, styleId: string, styleSheet: CSSStyleSheet, tagsUpdateOptions?: ITagsUpdateOptions);
        protected initStyleMaps(tags: TagsDescriptor): void;
        protected rebuildTagLabels(): void;
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polygon/AnchorsElement' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { AnchorsComponent } from "CanvasTools/CanvasTools/Region/Component/AnchorsComponent";
    export class AnchorsElement extends AnchorsComponent {
        static ANCHOR_POINT_LINE_SWITCH_THRESHOLD: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        protected buildPointAnchors(): void;
        protected subscribeLineToEvents(anchor: Snap.Element): void;
        protected updateRegion(p: Point2D): void;
        redraw(): void;
        protected onGhostPointerEnter(e: PointerEvent): void;
        protected onGhostPointerMove(e: PointerEvent): void;
        protected onGhostPointerUp(e: PointerEvent): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polygon/DragElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { DragComponent } from "CanvasTools/CanvasTools/Region/Component/DragComponent";
    export class DragElement extends DragComponent {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polygon/PolygonRegion' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { ChangeEventType, IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    import { Region } from "CanvasTools/CanvasTools/Region/Region";
    export class PolygonRegion extends Region {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, id: string, tagsDescriptor: TagsDescriptor, callbacks: IRegionCallbacks, tagsUpdateOptions?: ITagsUpdateOptions);
        onChange(component: RegionComponent, regionData: RegionData, state: ChangeEventType, multiSelection?: boolean): void;
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polygon/TagsElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { TagsComponent } from "CanvasTools/CanvasTools/Region/Component/TagsComponent";
    export class TagsElement extends TagsComponent {
        static DEFAULT_PRIMARY_TAG_RADIUS: number;
        static DEFAULT_SECONDARY_TAG_SIZE: number;
        static DEFAULT_SECONDARY_TAG_DY: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, tags: TagsDescriptor, styleId: string, styleSheet: CSSStyleSheet, tagsUpdateOptions?: ITagsUpdateOptions);
        protected initStyleMaps(tags: TagsDescriptor): void;
        protected rebuildTagLabels(): void;
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polyline/AnchorsElement' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { AnchorsComponent } from "CanvasTools/CanvasTools/Region/Component/AnchorsComponent";
    export class AnchorsElement extends AnchorsComponent {
        static ANCHOR_POINT_LINE_SWITCH_THRESHOLD: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        protected buildPointAnchors(): void;
        protected subscribeLineToEvents(anchor: Snap.Element): void;
        protected updateRegion(p: Point2D): void;
        redraw(): void;
        protected onGhostPointerEnter(e: PointerEvent): void;
        protected onGhostPointerMove(e: PointerEvent): void;
        protected onGhostPointerUp(e: PointerEvent): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polyline/DragElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { DragComponent } from "CanvasTools/CanvasTools/Region/Component/DragComponent";
    export class DragElement extends DragComponent {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polyline/PolylineRegion' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { ChangeEventType, IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    import { Region } from "CanvasTools/CanvasTools/Region/Region";
    export class PolylineRegion extends Region {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, id: string, tagsDescriptor: TagsDescriptor, callbacks: IRegionCallbacks, tagsUpdateOptions?: ITagsUpdateOptions);
        onChange(component: RegionComponent, regionData: RegionData, state: ChangeEventType, multiSelection?: boolean): void;
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Polyline/TagsElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { TagsComponent } from "CanvasTools/CanvasTools/Region/Component/TagsComponent";
    export class TagsElement extends TagsComponent {
        static DEFAULT_PRIMARY_TAG_RADIUS: number;
        static DEFAULT_SECONDARY_TAG_SIZE: number;
        static DEFAULT_SECONDARY_TAG_DY: number;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, tags: TagsDescriptor, styleId: string, styleSheet: CSSStyleSheet, tagsUpdateOptions?: ITagsUpdateOptions);
        protected initStyleMaps(tags: TagsDescriptor): void;
        protected rebuildTagLabels(): void;
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Rect/AnchorsElements' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { AnchorsComponent } from "CanvasTools/CanvasTools/Region/Component/AnchorsComponent";
    export class AnchorsElement extends AnchorsComponent {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        protected buildPointAnchors(): void;
        protected updateRegion(p: Point2D): void;
        protected onGhostPointerEnter(e: PointerEvent): void;
        protected onGhostPointerLeave(e: PointerEvent): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Rect/DragElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { DragComponent } from "CanvasTools/CanvasTools/Region/Component/DragComponent";
    export class DragElement extends DragComponent {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        redraw(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Rect/RectRegion' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { ChangeEventType, IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    import { Region } from "CanvasTools/CanvasTools/Region/Region";
    export class RectRegion extends Region {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, id: string, tagsDescriptor: TagsDescriptor, callbacks: IRegionCallbacks, tagsUpdateOptions?: ITagsUpdateOptions);
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
        resize(width: number, height: number): void;
        onChange(component: RegionComponent, regionData: RegionData, state: ChangeEventType, multiSelection?: boolean): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Rect/TagsElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { TagsComponent } from "CanvasTools/CanvasTools/Region/Component/TagsComponent";
    export class TagsElement extends TagsComponent {
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, tags: TagsDescriptor, styleId: string, styleSheet: CSSStyleSheet, tagsUpdateOptions?: ITagsUpdateOptions);
        protected initStyleMaps(tags: TagsDescriptor): void;
        protected rebuildTagLabels(): void;
        redraw(rebuildTags?: boolean): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/Region' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { ITagsUpdateOptions } from "CanvasTools/CanvasTools/Interface/ITagsUpdateOptions";
    import { ChangeEventType, IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export abstract class Region extends RegionComponent {
        tags: TagsDescriptor;
        ID: string;
        regionID: string;
        protected UI: Array<RegionComponent>;
        protected styleID: string;
        protected styleSheet: CSSStyleSheet;
        protected tagsUpdateOptions: ITagsUpdateOptions;
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks, id: string, tagsDescriptor: TagsDescriptor, tagsUpdateOptions?: ITagsUpdateOptions);
        protected s8(): string;
        removeStyles(): void;
        onChange(component: RegionComponent, regionData: RegionData, state: ChangeEventType, multiSelection?: boolean): void;
        updateTags(tags: TagsDescriptor, options?: ITagsUpdateOptions): void;
        move(point: IMovable): void;
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
        redraw(): void;
        freeze(): void;
        unfreeze(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/RegionMenu' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { IRegionCallbacks } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { RegionComponent } from "CanvasTools/CanvasTools/Region/Component/RegionComponent";
    export class MenuElement extends RegionComponent {
        static PathCollection: {
            delete: {
                iconSize: number;
                path: string;
            };
        };
        menuGroup: Snap.Paper;
        menuRect: Snap.Element;
        menuItemsGroup: Snap.Element;
        menuItems: Snap.Element[];
        constructor(paper: Snap.Paper, paperRect: Rect, regionData: RegionData, callbacks: IRegionCallbacks);
        addAction(action: string, icon: string, actor: (RegionComponent: any) => void): void;
        attachTo(region: RegionComponent): void;
        move(point: IMovable): void;
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
        showOnRegion(region: RegionComponent): void;
    }
}

declare module 'CanvasTools/CanvasTools/Region/RegionsManager' {
    import { ManipulationFunction } from "CanvasTools/CanvasTools/Interface/IRegionCallbacks";
    import { TagsDescriptor } from "CanvasTools/CanvasTools/Core/TagsDescriptor";
    import { RegionData } from "CanvasTools/CanvasTools/Core/RegionData";
    export class RegionsManager {
        onManipulationBegin: ManipulationFunction;
        onManipulationEnd: ManipulationFunction;
        onRegionSelected: Function;
        onRegionMove: Function;
        onRegionDelete: Function;
        readonly isFrozen: boolean;
        constructor(svgHost: SVGSVGElement, onManipulationBegin: ManipulationFunction, onManipulationEnd: ManipulationFunction);
        addRegion(id: string, regionData: RegionData, tagsDescriptor: TagsDescriptor): void;
        addRectRegion(id: string, regionData: RegionData, tagsDescriptor: TagsDescriptor): void;
        addPointRegion(id: string, regionData: RegionData, tagsDescriptor: TagsDescriptor): void;
        addPolylineRegion(id: string, regionData: RegionData, tagsDescriptor: TagsDescriptor): void;
        addPolygonRegion(id: string, regionData: RegionData, tagsDescriptor: TagsDescriptor): void;
        redrawAllRegions(): void;
        getSelectedRegionsBounds(): {
            id: string;
            x: number;
            y: number;
            width: number;
            height: number;
        }[];
        deleteRegionById(id: string): void;
        deleteAllRegions(): void;
        updateTagsById(id: string, tagsDescriptor: TagsDescriptor): void;
        updateTagsForSelectedRegions(tagsDescriptor: TagsDescriptor): void;
        selectRegionById(id: string): void;
        resize(width: number, height: number): void;
        freeze(nuance?: string): void;
        unfreeze(): void;
        toggleFreezeMode(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/AreaSelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    export enum SelectionMode {
        NONE = 0,
        POINT = 1,
        RECT = 2,
        COPYRECT = 3,
        POLYLINE = 4,
        POLYGON = 5
    }
    export class AreaSelector {
        static DefaultTemplateSize: Rect;
        callbacks: ISelectorCallbacks;
        constructor(svgHost: SVGSVGElement, callbacks?: ISelectorCallbacks);
        resize(width: number, height: number): void;
        enable(): void;
        disable(): void;
        show(): void;
        hide(): void;
        setSelectionMode(selectionMode: SelectionMode, options?: {
            template?: Rect;
        }): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/CrossElement' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { IMovable } from "CanvasTools/CanvasTools/Interface/IMovable";
    import { ElementPart } from "CanvasTools/CanvasTools/Selection/ElementPart";
    export class CrossElement extends ElementPart implements IMovable {
        readonly x: number;
        readonly y: number;
        constructor(paper: Snap.Paper, boundRect: Rect);
        boundToRect(rect: Rect): Point2D;
        move(point: IMovable): void;
        move(x: number, y: number): void;
        moveCross(p: IMovable, rect: Rect, square?: boolean, ref?: IMovable): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/ElementPart' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { IHideable } from "CanvasTools/CanvasTools/Interface/IHideadble";
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    export abstract class ElementPart implements IHideable, IResizable {
        node: Snap.Element;
        protected paper: Snap.Paper;
        protected boundRect: Rect;
        protected isVisible: boolean;
        readonly width: number;
        readonly height: number;
        constructor(paper: Snap.Paper, boundRect: Rect);
        hide(): void;
        show(): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/MaskElement' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ElementPart } from "CanvasTools/CanvasTools/Selection/ElementPart";
    export class MaskElement extends ElementPart {
        constructor(paper: Snap.Paper, boundRect: Rect, maskOut: {
            node: Snap.Element;
        });
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/PointSelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { Selector } from "CanvasTools/CanvasTools/Selection/Selector";
    export class PointSelector extends Selector {
        constructor(parent: SVGSVGElement, paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/PolygonSelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { Selector } from "CanvasTools/CanvasTools/Selection/Selector";
    export class PolygonSelector extends Selector {
        constructor(parent: SVGSVGElement, paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
        disable(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/PolylineSelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { Selector } from "CanvasTools/CanvasTools/Selection/Selector";
    export class PolylineSelector extends Selector {
        constructor(parent: SVGSVGElement, paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
        disable(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/RectCopySelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { Selector } from "CanvasTools/CanvasTools/Selection/Selector";
    export class RectCopySelector extends Selector {
        constructor(parent: SVGSVGElement, paper: Snap.Paper, boundRect: Rect, copyRect: Rect, callbacks?: ISelectorCallbacks);
        setTemplate(copyRect: Rect): void;
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/RectElement' {
    import { Point2D } from "CanvasTools/CanvasTools/Core/Point2D";
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ElementPart } from "CanvasTools/CanvasTools/Selection/ElementPart";
    export class RectElement extends ElementPart {
        rect: Rect;
        constructor(paper: Snap.Paper, boundRect: Rect, rect: Rect);
        move(p: Point2D): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/RectSelector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { Selector } from "CanvasTools/CanvasTools/Selection/Selector";
    export enum SelectionModificator {
        RECT = 0,
        SQUARE = 1
    }
    export class RectSelector extends Selector {
        constructor(parent: SVGSVGElement, paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
        resize(width: number, height: number): void;
        hide(): void;
        show(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Selection/Selector' {
    import { Rect } from "CanvasTools/CanvasTools/Core/Rect";
    import { IEventDescriptor } from "CanvasTools/CanvasTools/Interface/IEventDescriptor";
    import { IHideable } from "CanvasTools/CanvasTools/Interface/IHideadble";
    import { IResizable } from "CanvasTools/CanvasTools/Interface/IResizable";
    import { ISelectorCallbacks } from "CanvasTools/CanvasTools/Interface/ISelectorCallbacks";
    import { ElementPart } from "CanvasTools/CanvasTools/Selection/ElementPart";
    export abstract class Selector extends ElementPart {
        callbacks: ISelectorCallbacks;
        protected isEnabled: boolean;
        constructor(paper: Snap.Paper, boundRect: Rect, callbacks?: ISelectorCallbacks);
        enable(): void;
        disable(): void;
        protected subscribeToEvents(listeners: IEventDescriptor[]): void;
        protected enablify(f: (args: PointerEvent | KeyboardEvent) => void, bypass?: boolean): (args: KeyboardEvent | PointerEvent) => void;
        protected showAll(elements: IHideable[]): void;
        protected hideAll(elements: IHideable[]): void;
        protected resizeAll(elementSet: IResizable[]): void;
    }
}

declare module 'CanvasTools/CanvasTools/Toolbar/Toolbar' {
    import { IToolbarIcon } from "CanvasTools/CanvasTools/Interface/IToolbarIcon";
    import { IconCallback } from "CanvasTools/CanvasTools/Toolbar/ToolbarIcon";
    export class Toolbar {
        constructor(svgHost: SVGSVGElement);
        addSelector(icon: IToolbarIcon, actor: IconCallback): void;
        addSwitch(icon: IToolbarIcon, actor: IconCallback): void;
        addSeparator(): void;
        select(action: string): void;
        setSwitch(action: string, on: boolean): void;
        enableHotkeys(): void;
        disableHotkeys(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Toolbar/ToolbarIcon' {
    import { IToolbarIcon } from "CanvasTools/CanvasTools/Interface/IToolbarIcon";
    export type IconCallback = (action: string) => void;
    export enum ToolbarItemType {
        SELECTOR = 0,
        SWITCH = 1,
        SEPARATOR = 2
    }
    export abstract class ToolbarIcon {
        static IconWidth: number;
        static IconHeight: number;
        width: number;
        height: number;
        description: IToolbarIcon;
        node: Snap.Element;
        protected paper: Snap.Paper;
        protected x: number;
        protected y: number;
        protected isSelected: boolean;
        constructor(paper: Snap.Paper, icon?: IToolbarIcon);
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
        select(): void;
        unselect(): void;
        protected toggleSelection(): void;
    }
}

declare module 'CanvasTools/CanvasTools/Toolbar/ToolbarSelectIcon' {
    import { IToolbarIcon } from "CanvasTools/CanvasTools/Interface/IToolbarIcon";
    import { IconCallback, ToolbarIcon } from "CanvasTools/CanvasTools/Toolbar/ToolbarIcon";
    export class ToolbarSelectIcon extends ToolbarIcon {
        onAction: IconCallback;
        constructor(paper: Snap.Paper, icon: IToolbarIcon, onAction: IconCallback);
        activate(): void;
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Toolbar/ToolbarSeparator' {
    import { ToolbarIcon } from "CanvasTools/CanvasTools/Toolbar/ToolbarIcon";
    export class ToolbarSeparator extends ToolbarIcon {
        constructor(paper: Snap.Paper, width: number);
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
    }
}

declare module 'CanvasTools/CanvasTools/Toolbar/ToolbarSwitchIcon' {
    import { IToolbarIcon } from "CanvasTools/CanvasTools/Interface/IToolbarIcon";
    import { IconCallback, ToolbarIcon } from "CanvasTools/CanvasTools/Toolbar/ToolbarIcon";
    export class ToolbarSwitchIcon extends ToolbarIcon {
        onAction: IconCallback;
        constructor(paper: Snap.Paper, icon: IToolbarIcon, onAction: IconCallback);
        activate(): void;
        move(x: number, y: number): void;
        resize(width: number, height: number): void;
    }
}


"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protos_1 = require("./gen/protos");
const record_reader_1 = require("./record_reader");
// Reader for .tfrecord files containing TensorFlow training / prediction data.
class Reader {
    // Opens a TFRecord file and creates a RecordWriter around it.
    static async create(filePath) {
        const recordReader = await record_reader_1.RecordReader.create(filePath);
        return new Reader(recordReader);
    }
    // Reads a tensorflow.Example protocol buffer.
    //
    // Returns null when the end of the file is reached. Otherwise, returns a
    // tfrecord.Example, which is the result of compiling TensorFlow's
    // example.proto with protobuf.js.
    //
    // It is unsafe to call read() before the Promise returned by a previous
    // read() call resolves.
    async readExample() {
        const record = await this.recordReader_.readRecord();
        if (record === null)
            return null;
        return protos_1.tensorflow.Example.decode(record);
    }
    // Closes the reader.
    //
    // The reader is automatically closed when it reaches the end of the file.
    // Closing is idempotent.
    async close() {
        await this.recordReader_.close();
    }
    // Use Reader.create or tfrecord.createReader to obtain Reader instances.
    constructor(recordReader) {
        this.recordReader_ = recordReader;
    }
}
exports.Reader = Reader;
//# sourceMappingURL=reader.js.map
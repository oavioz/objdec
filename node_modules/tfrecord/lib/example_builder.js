"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const protos_1 = require("./gen/protos");
// Constructs a tfrecord.Example using the Builder pattern.
class ExampleBuilder {
    // Opens a TFRecord file and creates a RecordWriter around it.
    static create() {
        return new ExampleBuilder();
    }
    // Creates an example with no features.
    constructor() {
        this.features_ = {};
    }
    // Returns the built tfrecord.Example and reset the builder's state.
    releaseExample() {
        const returnValue = protos_1.tensorflow.Example.fromObject({ features: { feature: this.features_ } });
        this.features_ = {};
        return returnValue;
    }
    // Creates an int64 feature with a single value.
    setInteger(name, value) {
        this.features_[name] = { int64List: { value: [value] } };
    }
    // Creates an int64 feature with multiple values.
    setIntegers(name, values) {
        this.features_[name] = { int64List: { value: values } };
    }
    // Creates a float feature with a single value.
    setFloat(name, value) {
        this.features_[name] = { floatList: { value: [value] } };
    }
    // Creates a float feature with multiple values.
    setFloats(name, values) {
        this.features_[name] = { floatList: { value: values } };
    }
    // Creates a byte feature with a single value.
    setBinary(name, value) {
        this.features_[name] = { bytesList: { value: [value] } };
    }
    // Creates a byte feature with multiple values.
    setBinaries(name, values) {
        this.features_[name] = { bytesList: { value: values } };
    }
}
exports.ExampleBuilder = ExampleBuilder;
//# sourceMappingURL=example_builder.js.map